// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FONT_GEAR_ASSETS_H_
#define FLATBUFFERS_GENERATED_FONT_GEAR_ASSETS_H_

#include "flatbuffers/flatbuffers.h"

namespace gear {
namespace assets {

struct Font;
struct FontBuilder;

struct Font FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FontBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct FontBuilder {
  typedef Font Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Font::VT_DATA, data);
  }
  explicit FontBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FontBuilder &operator=(const FontBuilder &);
  flatbuffers::Offset<Font> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Font>(end);
    return o;
  }
};

inline flatbuffers::Offset<Font> CreateFont(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  FontBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

struct Font::Traits {
  using type = Font;
  static auto constexpr Create = CreateFont;
};

inline flatbuffers::Offset<Font> CreateFontDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return gear::assets::CreateFont(
      _fbb,
      data__);
}

inline const gear::assets::Font *GetFont(const void *buf) {
  return flatbuffers::GetRoot<gear::assets::Font>(buf);
}

inline const gear::assets::Font *GetSizePrefixedFont(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gear::assets::Font>(buf);
}

inline Font *GetMutableFont(void *buf) {
  return flatbuffers::GetMutableRoot<Font>(buf);
}

inline bool VerifyFontBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gear::assets::Font>(nullptr);
}

inline bool VerifySizePrefixedFontBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gear::assets::Font>(nullptr);
}

inline void FinishFontBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gear::assets::Font> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFontBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gear::assets::Font> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace assets
}  // namespace gear

#endif  // FLATBUFFERS_GENERATED_FONT_GEAR_ASSETS_H_
