// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_GEAR_ASSETS_H_
#define FLATBUFFERS_GENERATED_COMMON_GEAR_ASSETS_H_

#include "flatbuffers/flatbuffers.h"

namespace gear {
namespace assets {

struct fvec2;

struct ivec2;

struct Ref;
struct RefBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) fvec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  fvec2() {
    memset(static_cast<void *>(this), 0, sizeof(fvec2));
  }
  fvec2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(float _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(float _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
};
FLATBUFFERS_STRUCT_END(fvec2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ivec2 FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  ivec2() {
    memset(static_cast<void *>(this), 0, sizeof(ivec2));
  }
  ivec2(int32_t _x, int32_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(int32_t _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(int32_t _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
};
FLATBUFFERS_STRUCT_END(ivec2, 8);

struct Ref FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RefBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PTR = 6
  };
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  bool mutate_type(uint8_t _type) {
    return SetField<uint8_t>(VT_TYPE, _type, 0);
  }
  uint64_t ptr() const {
    return GetField<uint64_t>(VT_PTR, 0);
  }
  bool mutate_ptr(uint64_t _ptr) {
    return SetField<uint64_t>(VT_PTR, _ptr, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint64_t>(verifier, VT_PTR) &&
           verifier.EndTable();
  }
};

struct RefBuilder {
  typedef Ref Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(Ref::VT_TYPE, type, 0);
  }
  void add_ptr(uint64_t ptr) {
    fbb_.AddElement<uint64_t>(Ref::VT_PTR, ptr, 0);
  }
  explicit RefBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RefBuilder &operator=(const RefBuilder &);
  flatbuffers::Offset<Ref> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Ref>(end);
    return o;
  }
};

inline flatbuffers::Offset<Ref> CreateRef(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    uint64_t ptr = 0) {
  RefBuilder builder_(_fbb);
  builder_.add_ptr(ptr);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Ref::Traits {
  using type = Ref;
  static auto constexpr Create = CreateRef;
};

}  // namespace assets
}  // namespace gear

#endif  // FLATBUFFERS_GENERATED_COMMON_GEAR_ASSETS_H_
