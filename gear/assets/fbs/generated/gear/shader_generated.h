// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHADER_GEAR_ASSETS_H_
#define FLATBUFFERS_GENERATED_SHADER_GEAR_ASSETS_H_

#include "flatbuffers/flatbuffers.h"

namespace gear {
namespace assets {

struct Shader;
struct ShaderBuilder;

struct Shader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShaderBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTEX = 4,
    VT_FRAGMENT = 6
  };
  const flatbuffers::String *vertex() const {
    return GetPointer<const flatbuffers::String *>(VT_VERTEX);
  }
  flatbuffers::String *mutable_vertex() {
    return GetPointer<flatbuffers::String *>(VT_VERTEX);
  }
  const flatbuffers::String *fragment() const {
    return GetPointer<const flatbuffers::String *>(VT_FRAGMENT);
  }
  flatbuffers::String *mutable_fragment() {
    return GetPointer<flatbuffers::String *>(VT_FRAGMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTEX) &&
           verifier.VerifyString(vertex()) &&
           VerifyOffset(verifier, VT_FRAGMENT) &&
           verifier.VerifyString(fragment()) &&
           verifier.EndTable();
  }
};

struct ShaderBuilder {
  typedef Shader Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vertex(flatbuffers::Offset<flatbuffers::String> vertex) {
    fbb_.AddOffset(Shader::VT_VERTEX, vertex);
  }
  void add_fragment(flatbuffers::Offset<flatbuffers::String> fragment) {
    fbb_.AddOffset(Shader::VT_FRAGMENT, fragment);
  }
  explicit ShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderBuilder &operator=(const ShaderBuilder &);
  flatbuffers::Offset<Shader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Shader>(end);
    return o;
  }
};

inline flatbuffers::Offset<Shader> CreateShader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> vertex = 0,
    flatbuffers::Offset<flatbuffers::String> fragment = 0) {
  ShaderBuilder builder_(_fbb);
  builder_.add_fragment(fragment);
  builder_.add_vertex(vertex);
  return builder_.Finish();
}

struct Shader::Traits {
  using type = Shader;
  static auto constexpr Create = CreateShader;
};

inline flatbuffers::Offset<Shader> CreateShaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *vertex = nullptr,
    const char *fragment = nullptr) {
  auto vertex__ = vertex ? _fbb.CreateString(vertex) : 0;
  auto fragment__ = fragment ? _fbb.CreateString(fragment) : 0;
  return gear::assets::CreateShader(
      _fbb,
      vertex__,
      fragment__);
}

inline const gear::assets::Shader *GetShader(const void *buf) {
  return flatbuffers::GetRoot<gear::assets::Shader>(buf);
}

inline const gear::assets::Shader *GetSizePrefixedShader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gear::assets::Shader>(buf);
}

inline Shader *GetMutableShader(void *buf) {
  return flatbuffers::GetMutableRoot<Shader>(buf);
}

inline bool VerifyShaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gear::assets::Shader>(nullptr);
}

inline bool VerifySizePrefixedShaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gear::assets::Shader>(nullptr);
}

inline void FinishShaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gear::assets::Shader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedShaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gear::assets::Shader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace assets
}  // namespace gear

#endif  // FLATBUFFERS_GENERATED_SHADER_GEAR_ASSETS_H_
