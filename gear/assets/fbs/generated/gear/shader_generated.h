// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SHADER_GEAR_ASSETS_H_
#define FLATBUFFERS_GENERATED_SHADER_GEAR_ASSETS_H_

#include "flatbuffers/flatbuffers.h"

namespace gear {
namespace assets {

struct ShaderText;
struct ShaderTextBuilder;

struct Shader;
struct ShaderBuilder;

struct ShaderText FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShaderTextBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE = 4,
    VT_BIN = 6
  };
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  flatbuffers::String *mutable_source() {
    return GetPointer<flatbuffers::String *>(VT_SOURCE);
  }
  const flatbuffers::Vector<uint32_t> *bin() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_BIN);
  }
  flatbuffers::Vector<uint32_t> *mutable_bin() {
    return GetPointer<flatbuffers::Vector<uint32_t> *>(VT_BIN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_BIN) &&
           verifier.VerifyVector(bin()) &&
           verifier.EndTable();
  }
};

struct ShaderTextBuilder {
  typedef ShaderText Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(ShaderText::VT_SOURCE, source);
  }
  void add_bin(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> bin) {
    fbb_.AddOffset(ShaderText::VT_BIN, bin);
  }
  explicit ShaderTextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderTextBuilder &operator=(const ShaderTextBuilder &);
  flatbuffers::Offset<ShaderText> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShaderText>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShaderText> CreateShaderText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> source = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> bin = 0) {
  ShaderTextBuilder builder_(_fbb);
  builder_.add_bin(bin);
  builder_.add_source(source);
  return builder_.Finish();
}

struct ShaderText::Traits {
  using type = ShaderText;
  static auto constexpr Create = CreateShaderText;
};

inline flatbuffers::Offset<ShaderText> CreateShaderTextDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *source = nullptr,
    const std::vector<uint32_t> *bin = nullptr) {
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto bin__ = bin ? _fbb.CreateVector<uint32_t>(*bin) : 0;
  return gear::assets::CreateShaderText(
      _fbb,
      source__,
      bin__);
}

struct Shader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShaderBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ISBINARY = 4,
    VT_VERTEXTEXT = 6,
    VT_FRAGMENTTEXT = 8
  };
  bool isBinary() const {
    return GetField<uint8_t>(VT_ISBINARY, 0) != 0;
  }
  bool mutate_isBinary(bool _isBinary) {
    return SetField<uint8_t>(VT_ISBINARY, static_cast<uint8_t>(_isBinary), 0);
  }
  const gear::assets::ShaderText *vertexText() const {
    return GetPointer<const gear::assets::ShaderText *>(VT_VERTEXTEXT);
  }
  gear::assets::ShaderText *mutable_vertexText() {
    return GetPointer<gear::assets::ShaderText *>(VT_VERTEXTEXT);
  }
  const gear::assets::ShaderText *fragmentText() const {
    return GetPointer<const gear::assets::ShaderText *>(VT_FRAGMENTTEXT);
  }
  gear::assets::ShaderText *mutable_fragmentText() {
    return GetPointer<gear::assets::ShaderText *>(VT_FRAGMENTTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ISBINARY) &&
           VerifyOffset(verifier, VT_VERTEXTEXT) &&
           verifier.VerifyTable(vertexText()) &&
           VerifyOffset(verifier, VT_FRAGMENTTEXT) &&
           verifier.VerifyTable(fragmentText()) &&
           verifier.EndTable();
  }
};

struct ShaderBuilder {
  typedef Shader Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_isBinary(bool isBinary) {
    fbb_.AddElement<uint8_t>(Shader::VT_ISBINARY, static_cast<uint8_t>(isBinary), 0);
  }
  void add_vertexText(flatbuffers::Offset<gear::assets::ShaderText> vertexText) {
    fbb_.AddOffset(Shader::VT_VERTEXTEXT, vertexText);
  }
  void add_fragmentText(flatbuffers::Offset<gear::assets::ShaderText> fragmentText) {
    fbb_.AddOffset(Shader::VT_FRAGMENTTEXT, fragmentText);
  }
  explicit ShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShaderBuilder &operator=(const ShaderBuilder &);
  flatbuffers::Offset<Shader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Shader>(end);
    return o;
  }
};

inline flatbuffers::Offset<Shader> CreateShader(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool isBinary = false,
    flatbuffers::Offset<gear::assets::ShaderText> vertexText = 0,
    flatbuffers::Offset<gear::assets::ShaderText> fragmentText = 0) {
  ShaderBuilder builder_(_fbb);
  builder_.add_fragmentText(fragmentText);
  builder_.add_vertexText(vertexText);
  builder_.add_isBinary(isBinary);
  return builder_.Finish();
}

struct Shader::Traits {
  using type = Shader;
  static auto constexpr Create = CreateShader;
};

inline const gear::assets::Shader *GetShader(const void *buf) {
  return flatbuffers::GetRoot<gear::assets::Shader>(buf);
}

inline const gear::assets::Shader *GetSizePrefixedShader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gear::assets::Shader>(buf);
}

inline Shader *GetMutableShader(void *buf) {
  return flatbuffers::GetMutableRoot<Shader>(buf);
}

inline bool VerifyShaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gear::assets::Shader>(nullptr);
}

inline bool VerifySizePrefixedShaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gear::assets::Shader>(nullptr);
}

inline void FinishShaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gear::assets::Shader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedShaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gear::assets::Shader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace assets
}  // namespace gear

#endif  // FLATBUFFERS_GENERATED_SHADER_GEAR_ASSETS_H_
